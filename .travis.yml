# This is the http://travis-ci.org configuration file for Natron
env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "Ss+/N7eLl1cnXRP+XmXuBuuMXTZ/0TUgiGxBJMYGVTmwG2tDDAfhsUh5laeb/OE7dNxwLK5uLeb/XXI4AlP6W7tfquIAAq6/PhKIiRTXDgU6Sfa5voHiM8ni1x9rBtmaOk6/8QjWWSisrQmy9DmxRfYtP2i/sKkpIcJHCs5OCpo="
   # Coverity run condition (avoid matrix multiple runs), need customized
   # build script. Need an update if new matrix cases.
   - coverity_scan_run_condition='"$CC" = gcc -a "$TRAVIS_OS_NAME" != osx'
   # Coverity script test mode (if true no uploading, avoid reaching the quota)
   # usual processing: false.
   - coverity_scan_script_test_mode=false

os:
  - linux
  - osx

language: cpp

compiler:
  - gcc
  - clang

python:
  - "2.7"

addons:
  apt:
    sources:
    # Natron requires boost >= 1.49 to compile in C++11 mode
    # see http://stackoverflow.com/questions/11302758/error-while-copy-constructing-boostshared-ptr-using-c11
    # we use the irie/boost ppa for that purpose
    - irie-boost
    # kubuntu-ppa/backports contains OpenCV
    - kubuntu-ppa-backports
    # the PPA xorg-edgers contains cairo 1.12 (required for rotoscoping)
    - xorg-edgers-ppa
    # ubuntu-toolchain-r/test contains recent versions of gcc
    - ubuntu-toolchain-r-test
    packages:
    - gcc-4.9
    - g++-4.9
    - libqt4-dev
    - libglew-dev
    - libboost-serialization-dev
    - libexpat1-dev
    - gdb
    - libcairo2-dev
    - python-dev
    - python-pyside
    - libpyside-dev
    - libshiboken-dev
  coverity_scan:
    # customized build script URL
    # TRAVIS_REPO_SLUG: owner_name/repo_name of repository currently being built
    # TRAVIS_BRANCH: name of the branch currently being built
    build_script_url: https://raw.githubusercontent.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.travis-coverity-scan-build.sh
    # project metadata
    project:
      name: $TRAVIS_REPO_SLUG
    # Where email notification of build analysis results will be sent
    notification_email: frederic.devernay@m4x.org
    # Commands to prepare for build_command
    #build_command_prepend: ./configure
    # This command will be added as an argument to "cov-build" to compile
    # the project for analysis
    build_command: "tools/travis/build.sh"
    # Pattern to match selecting branches that will run analysis
    branch_pattern: coverity_scan

matrix:
  exclude:
    - os: osx
      compiler: gcc
# Uncomment the following if OSX build times out (happens when building with python3)
#  allow_failures:
#    - os: osx # we exceed the time limit
#  fast_finish: true

cache:
  apt: true
  directories:
  - /usr/local/Cellar

# Travis CI has 1.5 cores per VM, take advantage of it
before_install:
   - date -u
   - uname -a
   - export J='-j2'

install:
  - . tools/travis/coverity_env.sh
  - if [[ ${COVERITY_BUILD_DISABLED} == 1 ]];
    then
        exit 0;
    fi
  - tools/travis/install_dependencies.sh
  - curl -k -L https://github.com/MrKepzie/OpenColorIO-Configs/archive/Natron-v2.0.tar.gz | tar zxf -
  - mv OpenColorIO-Configs-Natron-v2.0 OpenColorIO-Configs

# OSX build will timeout if we redirect its output
#> install_dependencies.log 2>&1

script:
  - if [[ ${COVERITY_SCAN_BRANCH} == 1 ]];
    then
      echo "Don't build on coverity_scan branch.";
      exit 0;
    fi
  - tools/travis/build.sh

after_success:
  - if [ "$CC" = "gcc" -a "$TRAVIS_OS_NAME" == "linux"  ]; then ln -s Tests/google-mock Tests/google-test .; cd Tests; gcov -lp *.gcno > /dev/null; cd ..; coveralls -n --exclude /usr/include --exclude 'Tests/google-test' --exclude 'Tests/google-mock' --exclude 'google-test' --exclude 'google-mock' --exclude 'libs/OpenFX' --exclude-pattern '.*/moc_.*\.cpp' --exclude-pattern='.*/Tests/.*\.cpp' --exclude-pattern='.*/Tests/.*\.h'; fi
#  - if [ "$CC" = "gcc" -a "$TRAVIS_OS_NAME" == "linux" ]; then ln -s Tests/google-mock Tests/google-test .; coveralls --exclude /usr/include --exclude 'Tests/google-test' --exclude 'Tests/google-mock' --exclude 'google-test' --exclude 'google-mock' --exclude 'libs/OpenFX' --exclude-pattern '.*/moc_.*\.cpp' --exclude-pattern='.*/Tests/.*\.cpp' --exclude-pattern='.*/Tests/.*\.h' --gcov-options '\-lp'; fi

after_failure:
  - cat install_dependencies.log || true

