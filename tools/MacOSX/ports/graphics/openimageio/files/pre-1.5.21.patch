diff --git a/src/iff.imageio/iffoutput.cpp b/src/iff.imageio/iffoutput.cpp
index eaa2555..27303c2 100644
--- a/src/iff.imageio/iffoutput.cpp
+++ b/src/iff.imageio/iffoutput.cpp
@@ -120,7 +120,7 @@ IffOutput::open (const std::string &name, const ImageSpec &spec,
     // currently only RGB RLE compression is supported, we default to RLE
     // as Maya does not handle non-compressed IFF's very well.
     m_iff_header.compression =
-    (m_spec.get_string_attribute ("compression", "none") == std::string("none")) ? NONE : RLE;
+        (m_spec.get_string_attribute("compression") == "none") ? NONE : RLE;
 
     // we write the header of the file
     m_iff_header.x = m_spec.x;
@@ -269,8 +269,7 @@ IffOutput::close (void)
                 length += 8;
               
                 // tile compression.
-                bool tile_compress = 
-                (m_spec.get_string_attribute ("compression", "none") == std::string("none")) ? NONE : RLE;
+                bool tile_compress = (m_iff_header.compression == RLE);
                 
                 // set bytes.
                 std::vector<uint8_t> scratch;
@@ -484,8 +483,8 @@ IffOutput::close (void)
                                         swap_endian (&pixel);
                                     }
                                     // set pixel
-                                    *out_p++ = pixel;
-                                    (*out_p)++; // avoid gcc4.x warning
+                                    *out_p++ = pixel & 0xff;
+                                    *out_p++ = pixel >> 8;
                                 }
                             }
                         }
diff --git a/src/libOpenImageIO/imagebufalgo_xform.cpp b/src/libOpenImageIO/imagebufalgo_xform.cpp
index c87732d..a389a7e 100644
--- a/src/libOpenImageIO/imagebufalgo_xform.cpp
+++ b/src/libOpenImageIO/imagebufalgo_xform.cpp
@@ -243,7 +243,9 @@ resize_ (ImageBuf &dst, const ImageBuf &src,
     std::cerr << "Resizing " << srcspec.full_width << "x" << srcspec.full_height
               << " to " << dstspec.full_width << "x" << dstspec.full_height << "\n";
     std::cerr << "ratios = " << xratio << ", " << yratio << "\n";
-    std::cerr << "examining src filter support radius of " << radi << " x " << radj << " pixels\n";
+    std::cerr << "examining src filter " << filter->name()
+              << " support radius of " << radi << " x " << radj << " pixels\n";
+    std::cout << "  " << xtaps << "x" << ytaps << " filter taps\n";
     std::cerr << "dst range " << roi << "\n";
     std::cerr << "separable filter\n";
 #endif
diff --git a/src/libtexture/imagecache.cpp b/src/libtexture/imagecache.cpp
index 692d57d..f750b5c 100644
--- a/src/libtexture/imagecache.cpp
+++ b/src/libtexture/imagecache.cpp
@@ -1193,7 +1193,7 @@ ImageCacheImpl::check_max_files (ImageCachePerThreadInfo *thread_info)
     // looking up the filename of the first entry in the file cache.
     if (! m_file_sweep_name) {
         FilenameMap::iterator sweep = m_files.begin();
-        ASSERT (sweep != m_files.end() &&
+        DASSERT (sweep != m_files.end() &&
                 "no way m_files can be empty and have too many files open");
         m_file_sweep_name = sweep->first;
     }
@@ -2093,7 +2093,7 @@ ImageCacheImpl::check_max_mem (ImageCachePerThreadInfo *thread_info)
     // looking up the first entry in the tile cache.
     if (m_tile_sweep_id.empty()) {
         TileCache::iterator sweep = m_tilecache.begin();
-        ASSERT (sweep != m_tilecache.end() &&
+        DASSERT (sweep != m_tilecache.end() &&
                 "no way m_tilecache can be empty and use too much memory");
         m_tile_sweep_id = (*sweep).first;
     }
diff --git a/src/libutil/filter.cpp b/src/libutil/filter.cpp
index 85064ac..9e8e48e 100644
--- a/src/libutil/filter.cpp
+++ b/src/libutil/filter.cpp
@@ -221,9 +221,10 @@ private:
 
 class FilterCatmullRom1D : public Filter1D {
 public:
-    FilterCatmullRom1D (float width) : Filter1D(4.0f) { }
+    FilterCatmullRom1D (float width)
+        : Filter1D(4.0f), m_scale(4.0f/width) { }
     ~FilterCatmullRom1D (void) { }
-    float operator() (float x) const { return catrom1d(x); }
+    float operator() (float x) const { return catrom1d(x * m_scale); }
     string_view name (void) const { return "catmull-rom"; }
 
     static float catrom1d (float x) {
@@ -234,21 +235,25 @@ public:
                                       (3.0f * x3 - 5.0f * x2 + 2.0f) :
                                       (-x3 + 5.0f * x2 - 8.0f * x + 4.0f) );
     }
+private:
+    float m_scale;
 };
 
 
 
 class FilterCatmullRom2D : public Filter2D {
 public:
-    FilterCatmullRom2D (float width, float height) : Filter2D(4.0f,4.0f) { }
+    FilterCatmullRom2D (float width, float height)
+        : Filter2D(width,height), m_wscale(4.0f/width),
+          m_hscale(4.0f/height) { }
     ~FilterCatmullRom2D (void) { }
     float operator() (float x, float y) const {
-        return FilterCatmullRom1D::catrom1d(x)
-             * FilterCatmullRom1D::catrom1d(y);
+        return FilterCatmullRom1D::catrom1d(x * m_wscale)
+             * FilterCatmullRom1D::catrom1d(y * m_hscale);
     }
     bool separable (void) const { return true; }
-    float xfilt (float x) const { return FilterCatmullRom1D::catrom1d(x); }
-    float yfilt (float y) const { return FilterCatmullRom1D::catrom1d(y); }
+    float xfilt (float x) const { return FilterCatmullRom1D::catrom1d(x * m_wscale); }
+    float yfilt (float y) const { return FilterCatmullRom1D::catrom1d(y * m_hscale); }
     string_view name (void) const { return "catmull-rom"; }
 private :
     static float catrom1d (float x) {
@@ -259,6 +264,8 @@ private :
                                       (3.0f * x3 - 5.0f * x2 + 2.0f) :
                                       (-x3 + 5.0f * x2 - 8.0f * x + 4.0f) );
     }
+private:
+    float m_wscale, m_hscale;
 };
 
 
@@ -353,10 +360,11 @@ private:
 
 class FilterLanczos3_1D : public Filter1D {
 public:
-    FilterLanczos3_1D (float /*width*/) : Filter1D(6.0f) { }
+    FilterLanczos3_1D (float width)
+        : Filter1D(width), m_scale(6.0f/width) { }
     ~FilterLanczos3_1D (void) { }
     float operator() (float x) const {
-        return lanczos3 (x);
+        return lanczos3 (x * m_scale);
     }
     string_view name (void) const { return "lanczos3"; }
 
@@ -379,23 +387,28 @@ public:
         return a/(x*x*(m_pi*m_pi)) * sinf(pix)*sinf(pix*ainv);
 #endif
     }
+private:
+    float m_scale;
 };
 
 
 
 class FilterLanczos3_2D : public Filter2D {
 public:
-    FilterLanczos3_2D (float /*width*/, float /*height*/)
-        : Filter2D(6.0f,6.0f)
-    { }
+    FilterLanczos3_2D (float width, float height)
+        : Filter2D(width,height), m_wscale(6.0f/width),
+          m_hscale(6.0f/height) { }
     ~FilterLanczos3_2D (void) { }
     float operator() (float x, float y) const {
-        return FilterLanczos3_1D::lanczos3(x) * FilterLanczos3_1D::lanczos3(y);
+        return FilterLanczos3_1D::lanczos3 (x * m_wscale)
+             * FilterLanczos3_1D::lanczos3 (y * m_hscale);
     }
     bool separable (void) const { return true; }
-    float xfilt (float x) const { return FilterLanczos3_1D::lanczos3(x); }
-    float yfilt (float y) const { return FilterLanczos3_1D::lanczos3(y); }
+    float xfilt (float x) const { return FilterLanczos3_1D::lanczos3(x * m_wscale); }
+    float yfilt (float y) const { return FilterLanczos3_1D::lanczos3(y * m_hscale); }
     string_view name (void) const { return "lanczos3"; }
+private:
+    float m_wscale, m_hscale;
 };
 
 
@@ -654,10 +667,10 @@ FilterDesc filter1d_list[] = {
     { "triangle",        1,   2,    false,    true,     true },
     { "gaussian",        1,   3,    false,    true,     true },
     { "sharp-gaussian",  1,   2,    false,    true,     true },
-    { "catrom",          1,   4,    true,     false,    true },
+    { "catrom",          1,   4,    false,    true,     true },
     { "blackman-harris", 1,   3,    false,    true,     true },
     { "sinc",            1,   4,    false,    true,     true },
-    { "lanczos3",        1,   6,    true,     false,    true },
+    { "lanczos3",        1,   6,    false,    true,     true },
     { "mitchell",        1,   4,    false,    true,     true },
     { "bspline",         1,   4,    false,    true,     true },
     { "cubic",           1,   4,    false,    true,     true },
@@ -736,11 +749,11 @@ static FilterDesc filter2d_list[] = {
     { "triangle",        2,   2,    false,    true,     true  },
     { "gaussian",        2,   3,    false,    true,     true  },
     { "sharp-gaussian",  2,   2,    false,    true,     true  },
-    { "catrom",          2,   4,    true,     false,    true  },
+    { "catrom",          2,   4,    false,    true,     true  },
     { "blackman-harris", 2,   3,    false,    true,     true  },
     { "sinc",            2,   4,    false,    true,     true  },
-    { "lanczos3",        2,   6,    true,     false,    true  },
-    { "radial-lanczos3", 2,   6,    true,     false,    false },
+    { "lanczos3",        2,   6,    false,    true,     true  },
+    { "radial-lanczos3", 2,   6,    false,    true,     false },
     { "mitchell",        2,   4,    false,    true,     true  },
     { "bspline",         2,   4,    false,    true,     true  },
     { "disk",            2,   1,    false,    true,     false },
diff --git a/src/oiiotool/oiiotool.cpp b/src/oiiotool/oiiotool.cpp
index 287506b..76e22fb 100644
--- a/src/oiiotool/oiiotool.cpp
+++ b/src/oiiotool/oiiotool.cpp
@@ -2992,15 +2992,16 @@ action_fit (int argc, const char *argv[])
         action_resize (2, newargv);
         A = ot.top ();
         Aspec = A->spec(0,0);
-        A->spec(0,0)->full_width = (*A)(0,0).specmod().full_width = fit_full_width;
-        A->spec(0,0)->full_height = (*A)(0,0).specmod().full_height = fit_full_height;
-        A->spec(0,0)->full_x = (*A)(0,0).specmod().full_x = fit_full_x;
-        A->spec(0,0)->full_y = (*A)(0,0).specmod().full_y = fit_full_y;
-        A->spec(0,0)->x = (*A)(0,0).specmod().x = xoffset;
-        A->spec(0,0)->y = (*A)(0,0).specmod().y = yoffset;
         // Now A,Aspec are for the NEW resized top of stack
     }
 
+    A->spec(0,0)->full_width = (*A)(0,0).specmod().full_width = fit_full_width;
+    A->spec(0,0)->full_height = (*A)(0,0).specmod().full_height = fit_full_height;
+    A->spec(0,0)->full_x = (*A)(0,0).specmod().full_x = fit_full_x;
+    A->spec(0,0)->full_y = (*A)(0,0).specmod().full_y = fit_full_y;
+    A->spec(0,0)->x = (*A)(0,0).specmod().x = xoffset;
+    A->spec(0,0)->y = (*A)(0,0).specmod().y = yoffset;
+
     if (pad && (fit_full_width != Aspec->width ||
                 fit_full_height != Aspec->height)) {
         // Needs padding
diff --git a/src/openexr.imageio/exroutput.cpp b/src/openexr.imageio/exroutput.cpp
index a79cc70..e34b28a 100644
--- a/src/openexr.imageio/exroutput.cpp
+++ b/src/openexr.imageio/exroutput.cpp
@@ -305,6 +305,8 @@ OpenEXROutput::supports (const std::string &feature) const
 #ifdef USE_OPENEXR_VERSION2
     if (feature == "multiimage")
         return true;  // N.B. But OpenEXR does not support "appendsubimage"
+    if (feature == "deepdata")
+        return true;
 #endif
 
     // EXR supports random write order iff lineOrder is set to 'random Y'
diff --git a/testsuite/oiiotool/ref/fit3.tif b/testsuite/oiiotool/ref/fit3.tif
new file mode 100644
index 0000000..5eef300
Binary files /dev/null and b/testsuite/oiiotool/ref/fit3.tif differ
diff --git a/testsuite/oiiotool/ref/out.txt b/testsuite/oiiotool/ref/out.txt
index 2e0e257..b89be90 100644
--- a/testsuite/oiiotool/ref/out.txt
+++ b/testsuite/oiiotool/ref/out.txt
@@ -93,6 +93,8 @@ Comparing "fit.tif" and "ref/fit.tif"
 PASS
 Comparing "fit2.tif" and "ref/fit2.tif"
 PASS
+Comparing "fit3.tif" and "ref/fit3.tif"
+PASS
 Comparing "warped.tif" and "ref/warped.tif"
 PASS
 Comparing "rotated.tif" and "ref/rotated.tif"
diff --git a/testsuite/oiiotool/run.py b/testsuite/oiiotool/run.py
index 7498bce..63d9957 100755
--- a/testsuite/oiiotool/run.py
+++ b/testsuite/oiiotool/run.py
@@ -44,6 +44,8 @@ command += oiiotool ("resize64.tif --resize 512x512 -o resize512.tif")
 # test fit
 command += oiiotool (parent + "/oiio-images/grid.tif --fit 360x240 -d uint8 -o fit.tif")
 command += oiiotool (parent + "/oiio-images/grid.tif --fit 240x360 -d uint8 -o fit2.tif")
+# regression test: --fit without needing resize used to be problematic
+command += oiiotool ("tahoe-tiny.tif --fit 128x128 -d uint8 -o fit3.tif")
 
 # test rotate
 command += oiiotool ("resize.tif --rotate 45 -o rotated.tif")
@@ -232,7 +234,7 @@ command += oiiotool ("--no-autopremult src/rgba.tga --ch R,G,B -o rgbfromtga.png
 outputs = [ "filled.tif", "autotrim.tif",
             "resample.tif", "resize.tif", "resize2.tif",
             "resize64.tif", "resize512.tif",
-            "fit.tif", "fit2.tif",
+            "fit.tif", "fit2.tif", "fit3.tif",
             "warped.tif",
             "rotated.tif", "rotated-offcenter.tif", "rotated360.tif",
             "histogram_regular.tif", "histogram_cumulative.tif",
