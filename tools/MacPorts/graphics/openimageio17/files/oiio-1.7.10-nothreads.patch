diff -ur oiio-Release-1.7.10/src/include/OpenImageIO/imagebufalgo_util.h oiio-Release-1.7.10-nothreads/src/include/OpenImageIO/imagebufalgo_util.h
--- oiio-Release-1.7.10/src/include/OpenImageIO/imagebufalgo_util.h	2017-01-01 22:55:38.000000000 +0100
+++ oiio-Release-1.7.10-nothreads/src/include/OpenImageIO/imagebufalgo_util.h	2017-01-26 10:27:04.000000000 +0100
@@ -92,6 +92,9 @@
 void
 parallel_image (Func f, ROI roi, int nthreads=0, SplitDir splitdir=Split_Y)
 {
+#ifdef NOTHREADS
+    f (roi);
+#else // !NOTHREADS
     // Special case: threads <= 0 means to use the "threads" attribute
     if (nthreads <= 0)
         OIIO::getattribute ("threads", nthreads);
@@ -140,6 +143,7 @@
             f (roi);   // Run the last one in the calling thread
     }
     threads.join_all ();
+#endif // !NOTHREADS
 }
 
 
Only in oiio-Release-1.7.10-nothreads/src/include/OpenImageIO: imagebufalgo_util.h.orig
Only in oiio-Release-1.7.10-nothreads/src/include/OpenImageIO: imagebufalgo_util.h~
diff -ur oiio-Release-1.7.10/src/include/OpenImageIO/thread.h oiio-Release-1.7.10-nothreads/src/include/OpenImageIO/thread.h
--- oiio-Release-1.7.10/src/include/OpenImageIO/thread.h	2017-01-01 22:55:38.000000000 +0100
+++ oiio-Release-1.7.10-nothreads/src/include/OpenImageIO/thread.h	2017-01-26 10:26:00.000000000 +0100
@@ -515,6 +515,7 @@
 
 
 
+#ifndef NOTHREADS
 /// Simple thread group class. This is just as good as boost::thread_group,
 /// for the limited functionality that we use.
 class thread_group {
@@ -552,6 +553,7 @@
     mutex m_mutex;
     std::vector<thread *> m_threads;
 };
+#endif // NOTHREADS
 
 
 OIIO_NAMESPACE_END
Only in oiio-Release-1.7.10-nothreads/src/include/OpenImageIO: thread.h.orig
diff -ur oiio-Release-1.7.10/src/libOpenImageIO/imagebufalgo_compare.cpp oiio-Release-1.7.10-nothreads/src/libOpenImageIO/imagebufalgo_compare.cpp
--- oiio-Release-1.7.10/src/libOpenImageIO/imagebufalgo_compare.cpp	2017-01-01 22:55:38.000000000 +0100
+++ oiio-Release-1.7.10-nothreads/src/libOpenImageIO/imagebufalgo_compare.cpp	2017-01-26 10:26:00.000000000 +0100
@@ -832,6 +832,11 @@
     if (blocksize <= 0 || blocksize >= roi.height())
         return simplePixelHashSHA1 (src, extrainfo, roi);
 
+#ifdef NOTHREADS
+    int nblocks = 1;
+    std::vector<std::string> results (1);
+    sha1_hasher (&src, roi, blocksize, &results[0], 0);
+#else // !NOTHREADS
     // Request for 0 threads means "use the OIIO global thread count"
     if (nthreads <= 0)
         OIIO::getattribute ("threads", nthreads);
@@ -856,6 +861,7 @@
         }
         threads.join_all ();
     }
+#endif // !NOTHREADS
 
 #ifdef USE_OPENSSL
     // If OpenSSL was available at build time, use its SHA-1
diff -ur oiio-Release-1.7.10/src/testtex/testtex.cpp oiio-Release-1.7.10-nothreads/src/testtex/testtex.cpp
--- oiio-Release-1.7.10/src/testtex/testtex.cpp	2017-01-01 22:55:38.000000000 +0100
+++ oiio-Release-1.7.10-nothreads/src/testtex/testtex.cpp	2017-01-26 10:26:00.000000000 +0100
@@ -184,7 +184,9 @@
                   "--derivs", &test_derivs, "Test returning derivatives of texture lookups",
                   "--resetstats", &resetstats, "Print and reset statistics on each iteration",
                   "--testhash", &testhash, "Test the tile hashing function",
+#ifndef NOTHREADS
                   "--threadtimes %d", &threadtimes, "Do thread timings (arg = workload profile)",
+#endif // NOTHREADS
                   "--trials %d", &ntrials, "Number of trials for timings",
                   "--wedge", &wedge, "Wedge test",
                   "--testicwrite %d", &testicwrite, "Test ImageCache write ability (1=seeded, 2=generated)",
@@ -836,6 +838,7 @@
 
 
 
+#ifndef NOTHREADS
 static const char *workload_names[] = {
     /*0*/ "None",
     /*1*/ "Everybody accesses the same spot in one file (handles)",
@@ -973,6 +976,7 @@
     ASSERT ((int)threads.size() == numthreads);
     threads.join_all ();
 }
+#endif // NOTHREADS
 
 
 
@@ -1155,6 +1159,7 @@
     xform = persp * rot * trans * scale;
     xform.invert();
 
+#ifndef NOTHREADS
     if (threadtimes) {
         // If the --iters flag was used, do that number of iterations total
         // (divided among the threads). If not supplied (iters will be 1),
@@ -1187,7 +1192,9 @@
         }
         std::cout << "\n";
 
-    } else if (iters > 0 && filenames.size()) {
+    } else
+#endif // NOTHREADS
+    if (iters > 0 && filenames.size()) {
         ustring filename (filenames[0]);
         test_gettextureinfo (filenames[0]);
         const char *texturetype = "Plain Texture";
Only in oiio-Release-1.7.10-nothreads/src/testtex: testtex.cpp.orig
